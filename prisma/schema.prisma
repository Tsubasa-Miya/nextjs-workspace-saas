generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                String          @id @default(cuid())
  email             String          @unique
  name              String?
  passwordHash      String
  createdAt         DateTime        @default(now())
  assetsCreated     Asset[]         @relation("AssetCreator")
  invitesSent       Invite[]        @relation("InviteSender")
  memberships       Membership[]
  notesCreated      Note[]          @relation("NoteCreator")
  passwordResets    PasswordReset[]
  tasksAssigned     Task[]          @relation("TaskAssignee")
  tasksCreated      Task[]          @relation("TaskCreator")
  workspacesCreated Workspace[]
}

model Workspace {
  id          String       @id @default(cuid())
  name        String
  slug        String       @unique
  createdBy   String
  createdAt   DateTime     @default(now())
  assets      Asset[]
  invites     Invite[]
  memberships Membership[]
  notes       Note[]
  tasks       Task[]
  creator     User         @relation(fields: [createdBy], references: [id])
}

model Membership {
  id          String    @id @default(cuid())
  userId      String
  workspaceId String
  role        Role
  createdAt   DateTime  @default(now())
  user        User      @relation(fields: [userId], references: [id])
  workspace   Workspace @relation(fields: [workspaceId], references: [id])

  @@unique([userId, workspaceId])
  @@index([workspaceId])
}

model Task {
  id          String     @id @default(cuid())
  workspaceId String
  title       String
  description String?
  status      TaskStatus @default(Todo)
  assigneeId  String?
  dueAt       DateTime?
  createdBy   String
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  assignee    User?      @relation("TaskAssignee", fields: [assigneeId], references: [id])
  creator     User       @relation("TaskCreator", fields: [createdBy], references: [id])
  workspace   Workspace  @relation(fields: [workspaceId], references: [id])

  @@index([workspaceId])
  @@index([assigneeId])
  @@index([status])
  @@index([workspaceId, createdAt])
}

model Note {
  id          String    @id @default(cuid())
  workspaceId String
  title       String
  body        String
  tags        Json?
  createdBy   String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  creator     User      @relation("NoteCreator", fields: [createdBy], references: [id])
  workspace   Workspace @relation(fields: [workspaceId], references: [id])

  @@index([workspaceId])
  @@index([workspaceId, createdAt])
}

model Asset {
  id          String    @id @default(cuid())
  workspaceId String
  key         String
  mime        String
  size        Int
  createdBy   String
  createdAt   DateTime  @default(now())
  creator     User      @relation("AssetCreator", fields: [createdBy], references: [id])
  workspace   Workspace @relation(fields: [workspaceId], references: [id])

  @@index([workspaceId])
  @@index([workspaceId, createdAt])
}

model Invite {
  id          String    @id @default(cuid())
  workspaceId String
  email       String
  token       String    @unique
  role        Role
  expiresAt   DateTime
  invitedBy   String
  acceptedAt  DateTime?
  createdAt   DateTime  @default(now())
  sender      User      @relation("InviteSender", fields: [invitedBy], references: [id])
  workspace   Workspace @relation(fields: [workspaceId], references: [id])

  @@index([workspaceId])
  @@index([email])
}

model PasswordReset {
  id        String    @id @default(cuid())
  userId    String
  token     String    @unique
  expiresAt DateTime
  usedAt    DateTime?
  createdAt DateTime  @default(now())
  user      User      @relation(fields: [userId], references: [id])

  @@index([userId])
}

enum Role {
  Owner
  Admin
  Member
}

enum TaskStatus {
  Todo
  InProgress
  Done
}
